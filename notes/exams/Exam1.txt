Category: The String Class
Question:  What will happen when you compile and run the following code:
	String search = "boo:and:foo";
	char c = search.charAt(search.length());
	System.out.println(c);
A. The code will compile and when run print "o".
B. The code will compile and when run have no output.
C. The code will not compile.
D. The code will compile but not run.
Answer:
D.  The code will compile and throw a runtime error:
java.lang.StringIndexOutOfBoundsException: String index out of range: 11
For answer A to print "o", you would have to use the following code:
char c = search.charAt(search.length()-1);
B is wrong as there would be no way to get no output from a the charAt method of a string with no spaces.
C is wrong as the code will compile fine.

Category: String Class
Question:
What will be the output of this code snippet?
		String c2 = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		char c3 = c2.charAt('!');
		System.out.println(c3);
A. The code will compile and when run print "H".
B. The code will compile and when run have no output.
C. The code will not compile.
D. The code will compile but not run.

Answer:
The correct answer is A.  The character '!' will be promoted to an integer with the value 33, so the it would be equivalent to the following:
char c3 = c2.charAt(33);
This will return the ASCII character for 33 which is "H".

Category: instanceof equality
Question:
What will the output of the following code be?
Object o1 = new Object();
Object o2 = new Object();
System.out.println("o1 is an Object? "+(o1 instanceof o2));
A. o1 is an Object? true
B. o1 is an Object? false
C. compile time error
D. runtime error

Answer:
This will cause a compile time error: cannot find symbol: o2.  The instanceof operator can not take instantiated objects as the right hand side operand, only classes.  
For example:
(o1 instanceof o2) Wrong.
(o1 instanceof Object) right!
- it will return true even if the right hand side is a super class.  ie:
class Animal {} class Cat extends Animal {}
Cat c = new Cat();
(c instanceof Animal) == true

Question:
public class ExamQuestions
{
	ExamQuestions () {
		this("ExamQuestions");
	}

	ExamQuestions (String name)
	{
		this();
		//super();
		System.out.println("Started :"+name);
	}

	public satatic void main(String [] args)
	{
		ExamQuestions eq = new ExamQuestions();
	}
What will be the result if this is compiled and run?

Answer: 
There will be a compile time error: recursive constructor invocation.
Category: Constructors?


Question:
What will be the output when running this class?
	private static void testInstanceOf()
	{
		Object o = 1;
		if (o instanceof Integer)
		{
			System.out.println("OK!");
		} else
		{
			System.out.println("Not OK!");
		}
	}
A. Compile error.
B. Runtime error.
C. Compiles and prints Not OK! when run.
D. Compiles and prints OK! when run.

Answer:
1 is autoboxed into an Integer wrapper object for Object o.  So when compared with the instanceof operator, it proves that autoboxing happened.
Correct response: D.


Question:
What will be the result of compiling and running the following code:
public class FinalInit
{
	final int i;
	FinalInit() {}
	FinalInit(int _i) {i = _i;}
	FinalInit(Object o) {i = 2;}
	public static void main(String[] args) 
	{
		FinalInit fi = new FinalInit();
		System.out.println("i is "+fi.i);
	}
}
A. Compile error.
B. Runtime error.
C. Compiles and prints "i is 1"
D. Compiles and prints "i is 2"
E. Compiles and prints "i is"

Correct response: A
Explanation: A final variable must be initialized when an instance is constructed, or else the code will not compile. This can be done either in an instance initializer or in EVERY constructor.
The keyword static is used to signify that a block is static initializer. If nothing is there before starting curly brace then it is an instance initializer. (from ETS)
Correct response: 5
Category: Working with Java Data Types - Variables and Objects. Easy

Questin:
What will the following print when compiled and run?
		final byte x = 64;
		final byte y = 64;
		byte z = x + y;
A. Compile error: possible loss of precision.
B. Runtime error.
C. Compiles and prints 128
D. Compiles and prints -128

Answer:
If the sum of variables x and y was less the 127 (the max value of a byte) then this code would compile.  As it is, there is a compile time error saying "possible loss of precision".  If the sum was less than 127, but the bytes were not final, you would also get the same error.
Correct response: A.

