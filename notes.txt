To Read:

Groovy failure in MultpilierTest
2 
http://groovy.codehaus.org/Advanced+OO
http://groovy.codehaus.org/Groovy+way+to+implement+interfaces
...

print table from
C:\Documents and Settings\Administrator\My Documents\Downloads\groovy\core\overriding\Overriding and Hiding Methods (The Java™ Tutorials   Learning the Java Language   Interfaces and Inheritance).htm

Got this error running AllTests:
Failed to create Script instance for class: MultiplierTest.  Reason: java.lang.InstantiationException:  MultiplierTest.
But if we run MultiplierTest by itself, there is no output at all.

Questions and Exercises  Nested Classes (The Java™ Tutorials ) Learning the Java Language ) Classes and Objects).htm


Java

* overriding.interface)methods contians code that needs Java 8.

Regular Expressionses

Instances of the Pattern class are immutable and are safe for use by multiple concurrent threads. Instances of the Matcher class are not safe for such use.

Special non-capturing contructs like (?<=X) mean X, via zero-width positive lookbehind.

Unicode

\p{prop} specifies a unicode block
\p{InMongolian}  for the Mongolian language.

The supported categories are those of The Unicode Standard in the version specified by the Character class. 
http://www.unicode.org/unicode/standard/standard.html
The category names are those defined in the Standard, both normative and informative. The block names supported by Pattern are the valid block names accepted and defined by UnicodeBlock.forName.



Groovy

Grape (The Groovy Adaptable Packaging Engine or Groovy Advanced Packaging Engine) is the infrastructure enabling the grab() calls in Groovy, a set of classes leveraging Ivy to allow for a repository driven module system for Groovy. This allows a developer to write a script with an essentially arbitrary library requirement, and ship just the script. Grape will, at runtime, download as needed and link the named libraries and all dependencies forming a transitive closure when the script is run from existing repositories such as Ibiblio, Codehaus, and java.net.

Testing
often Ant / Maven look for *.java files to find unit tests with pattern matching, rather than *.class files.

There's an option in Maven to ensure you search for classes (and so find any Groovy unit test cases) via this property

maven.test.search.classdir = true
Once you've got this enabled you can use Maven goals to run individual test cases like this

maven test:single -Dtestcase=foo.MyGroovyTest


Core Java

Nested Classes
There Static nested classes, but Non-static nested classes are called inner classes.
A nested class can be declared private, public, protected, or package private. 

class OuterClass {
    ...
    static class StaticNestedClass 
    {
        // cannot refer directly to instance variables or methods defined in its enclosing class
        //  just like any other top-level class.
    }

    // to create an object for the static nested class, use this syntax:
	OuterClass.StaticNestedClass nestedObject = new OuterClass.StaticNestedClass();

    class InnerClass 
    {
        //  have access to other members of the enclosing class, even if they are declared private.
        // cannot define any static members itself.
    }

    // To instantiate an inner class, you must first instantiate the outer class. 
    // Then, create the inner object within the outer object with this syntax:
	OuterClass.InnerClass innerObject = outerObject.new InnerClass();

	// two kinds of inner classes: local classes and anonymous classes.
}



Enums
All enums implicitly extend java.lang.Enum.  Since Java does not support multiple inheritance, an enum cannot extand anything else.
An interface name can be used anywhere a type can be used.

Questions and Exercises: Inheritance
1.a and c incorrect.  How do you hide an inherited method?  It's considered a bad programming practice, but the table in Overriding and Hiding Methods section shows the effect of declaring a method with the same signature as a method in the superclass.
http://docs.oracle.com/javase/tutorial/java/IandI/override.html

Instance Methods - An instance method in a subclass with the same signature overrides the superclass's method.  An overriding method can also return a subtype of the type returned by the overridden method. This subtype is called a covariant return type.  The version of the overridden instance method that gets invoked is the one in the subclass.

Static Methods - If a subclass defines a static method with the same signature as a static method in the superclass, then the method in the subclass hides the one in the superclass.  The version of the hidden static method that gets invoked depends on whether it is invoked from the superclass or the subclass.

Interface Methods - Default methods and abstract methods in interfaces are inherited like instance methods. 
** What the hell is a default method?***

However, when the supertypes of a class or interface provide multiple default methods with the same signature, the Java compiler follows inheritance rules to resolve the name conflict. 
- Instance methods are preferred over interface default methods.
- •Methods that are already overridden by other candidates are ignored. This circumstance can arise when supertypes share a common ancestor.
You could invoke any of the of the default implementations with the super keyword.
You can use the super keyword to invoke a default method in both classes and interfaces.
Inherited instance methods from classes can override abstract interface methods. 

Modifiers
The access specifier for an overriding method can allow more, but not less, access than the overridden method. For example, a protected instance method in the superclass can be made public, but not private, in the subclass.

You will get a compile-time error if you attempt to change an instance method in the superclass to a static method in the subclass, and vice versa.

You can prevent a class or method from being subclassed by using the final keyword.


Numbers 

The byteValue, shortValue, and similar methods of the Number class convert one numeric type to another. The valueOf method converts a string to a number, and the toString method converts a number to a string.

To format a string containing numbers for output, you can use the printf() or format() methods in the PrintStream class. 

What Integer method would you use to convert a string expressed in base 5 into the equivalent int? For example, how would you convert the string "230" into the integer value 65? Show the code you would use to accomplish this task.

What Double method can you use to detect whether a floating-point number has the special value Not a Number (NaN)?

Autoboxing is the automatic conversion that the Java compiler makes between the primitive types and their corresponding object wrapper classes

List<Integer> li = new ArrayList<>();
for (int i = 1; i < 50; i += 2)
    li.add(i);

becomes:

List<Integer> li = new ArrayList<>();
for (int i = 1; i < 50; i += 2)
    li.add(Integer.valueOf(i));

autoboxing happens when a primitive value is:
- Passed as a parameter to a method that expects an object of the corresponding wrapper class.
- Assigned to a variable of the corresponding wrapper class.

unboxing is Converting an object of a wrapper type (Integer) to its corresponding primitive (int) value. The Java compiler applies unboxing when an object of a wrapper class is:
- Passed as a parameter to a method that expects a value of the corresponding primitive type.
- Assigned to a variable of the corresponding primitive type.


Parsing Wikitionary

korean_wiki = http://ko.wiktionary.org/wiki/
english_wkik = http://en.wiktionary.org/wiki/

Seach wiki for word
found no.  Page contains: 
<div id="mw-content-text"><div class="noarticletext">
mark text as unverified.
found yes, mark as text verified.
find word tyoe
seach for definition.
found/not found as above
search for other definitions and create associations/



Scratch 

Catastrophic Backtracking.

